// Code generated by hertz generator.

package core

import (
	"context"
	"time"

	core "douyin_backend/biz/hertz_gen/model/core"
	"douyin_backend/biz/model"
	"douyin_backend/biz/mw/jwt"
	"douyin_backend/biz/service"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/common/hlog"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"golang.org/x/crypto/bcrypt"
)

// UserRegister .
// @router /douyin/user/register/ [POST]
func UserRegister(ctx context.Context, c *app.RequestContext) {
	var err error
	var req core.UserRegisterRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(core.UserRegisterResponse)
	responseFail := func(code int, msg string) {
		resp.StatusCode, resp.StatusMsg = -1, &msg
		c.JSON(consts.StatusOK, resp)
	}

	userService := service.UserService{}

	user, err := userService.CreateUser(&model.User{Username: req.Username, Password: req.Password})
	if err != nil {
		responseFail(-1, err.Error())
		return
	}

	token, err := jwt.SignUser(user.Name, time.Hour*7*24)
	if err != nil {
		hlog.DefaultLogger().Debug(err)
		responseFail(-1, "internal error")
		return
	}

	resp.Token = *token
	resp.StatusCode = 0
	resp.UserID = user.ID

	c.JSON(consts.StatusOK, resp)
}

// UserLogin .
// @router /douyin/user/login/ [POST]
func UserLogin(ctx context.Context, c *app.RequestContext) {
	var err error
	var req core.UserLoginRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	userService := service.UserService{}
	resp := new(core.UserLoginResponse)
	dbUser, err := userService.GetUserByName(req.Username)
	if err != nil || bcrypt.CompareHashAndPassword([]byte(dbUser.Password), []byte(req.Password)) != nil {
		msg := "wrong username or password"
		resp.StatusCode, resp.StatusMsg = -1, &msg
		c.JSON(consts.StatusOK, resp)
		return
	}

	token, err := jwt.SignUser(req.Username, time.Hour*7*24)
	if err != nil {
		msg := "internal error"
		resp.StatusCode, resp.StatusMsg = -1, &msg
		c.JSON(consts.StatusInternalServerError, resp)
		return
	}

	resp.Token = *token
	resp.StatusCode = 0
	resp.UserID = dbUser.ID

	c.JSON(consts.StatusOK, resp)
}

// UserInfo .
// @router /douyin/user/ [GET]
func UserInfo(ctx context.Context, c *app.RequestContext) {
	var err error
	var req core.UserRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	userService := service.UserService{}
	resp := new(core.UserResponse)
	user, err := userService.GetUserById(req.UserID)
	if err != nil {
		msg := "user not found"
		resp.StatusCode, resp.StatusMsg = -1, &msg
		c.JSON(consts.StatusOK, resp)
		return
	}
	resp.User = &user
	c.JSON(consts.StatusOK, resp)
}
