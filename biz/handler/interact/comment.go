// Code generated by hertz generator.

package interact

import (
	"context"
	"strconv"

	interact "douyin_backend/biz/hertz_gen/model/interact"
	"douyin_backend/biz/service"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// CommentAction .
// @router /douyin/comment/action/ [POST]
func CommentAction(ctx context.Context, c *app.RequestContext) {
	var err error
	var req interact.CommentActionRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(interact.CommentActionResponse)
	responseFail := func(code int, msg string) {
		resp.StatusCode, resp.StatusMsg = -1, &msg
		c.JSON(consts.StatusOK, resp)
	}

	id, _ := c.Get("userId") // get user id from jwt middleware
	userid, _ := id.(string)
	userId, err := strconv.ParseInt(userid, 10, 64)
	if err != nil {
		responseFail(-1, "internal error")
		return
	}

	if req.ActionType < 1 || req.ActionType > 2 {
		responseFail(-1, "invalid action type")
		return
	}

	service := new(service.CommentService)

	if req.ActionType == 1 { // add comment
		comment, err := service.CreateComment(userId, req.VideoID, req.CommentText)

		if err != nil {
			responseFail(-1, "internal error")
			return
		}

		resp.Comment = &comment
	} else { // delete comment
		err := service.DeleteComment(*req.CommentID)
		if err != nil {
			responseFail(-1, "internal error")
			return
		}
	}

	resp.StatusCode = 0

	c.JSON(consts.StatusOK, resp)
}

// CommentList .
// @router /douyin/comment/list/ [GET]
func CommentList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req interact.CommentListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(interact.CommentListResponse)
	responseFail := func(code int, msg string) {
		resp.StatusCode, resp.StatusMsg = -1, &msg
		c.JSON(consts.StatusOK, resp)
	}

	id, _ := c.Get("userId") // get user id from jwt middleware
	userid, _ := id.(string)
	userId, err := strconv.ParseInt(userid, 10, 64)
	if err != nil {
		responseFail(-1, "internal error")
		return
	}

	service := new(service.CommentService)

	comments, err := service.GetCommentList(req.VideoID, userId)

	if err != nil {
		responseFail(-1, "internal error")
		return
	}

	resp.CommentList = comments
	resp.StatusCode = 0

	c.JSON(consts.StatusOK, resp)
}
