// Code generated by hertz generator.

package socialize

import (
	"context"

	"douyin_backend/biz/hertz_gen/model/socialize"
	"douyin_backend/biz/service/relationservice"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// RelationAction .
// @router /douyin/relation/action/ [POST]
func RelationAction(ctx context.Context, c *app.RequestContext) {
	var err error
	var req socialize.RelationActionRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(socialize.RelationActionResponse)
	responseFail := func(code int32, msg string) {
		resp.StatusCode, resp.StatusMsg = code, &msg
		c.JSON(consts.StatusOK, resp)
	}

	if req.ActionType < 1 || req.ActionType > 3 {
		responseFail(-1, "invalid action type")
	}

	uid := c.GetInt64("uid")

	if req.ActionType == 1 {
		// Follow
		// Check if user has already followed
		if err := relationservice.Follow(uid, req.ToUserID); err == nil {
			responseFail(-1, err.Error())
			return
		}
	}

	if req.ActionType == 2 {
		// Unfollow
		// Check if user has already followed
		if err := relationservice.Unfollow(uid, req.ToUserID); err != nil {
			responseFail(-1, err.Error())
			return
		}
	}

	resp.StatusCode = 0
	resp.StatusMsg = nil

	c.JSON(consts.StatusOK, resp)
}

// FollowList .
// @router /douyin/relation/follow/list/ [GET]
func FollowList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req socialize.RelationFollowListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(socialize.RelationFollowListResponse)

	list, err := relationservice.GetFollowings(req.UserID)

	if err != nil {
		resp.StatusCode = -1
		errMsg := err.Error()
		resp.StatusMsg = &errMsg
		c.JSON(consts.StatusOK, resp)
		return
	}

	resp.StatusCode = 0
	resp.StatusMsg = nil
	resp.UserList = list

	c.JSON(consts.StatusOK, resp)
}

// FollowerList .
// @router /douyin/relation/follower/list/ [GET]
func FollowerList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req socialize.RelationFollowerListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(socialize.RelationFollowerListResponse)

	list, err := relationservice.GetFollowers(req.UserID)

	if err != nil {
		resp.StatusCode = -1
		errMsg := err.Error()
		resp.StatusMsg = &errMsg
		c.JSON(consts.StatusOK, resp)
		return
	}

	resp.StatusCode = 0
	resp.StatusMsg = nil
	resp.UserList = list

	c.JSON(consts.StatusOK, resp)
}

// FriendList .
// @router /douyin/relation/friend/list/ [GET]
func FriendList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req socialize.RelationFriendListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(socialize.RelationFriendListResponse)

	c.JSON(consts.StatusOK, resp)
}
